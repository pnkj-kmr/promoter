// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PromoteClient is the client API for Promote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromoteClient interface {
	Ping(ctx context.Context, in *ReqPing, opts ...grpc.CallOption) (*ResPing, error)
	AreYouLeader(ctx context.Context, in *ReqLead, opts ...grpc.CallOption) (*ResLead, error)
	Heartbeat(ctx context.Context, in *ReqBeat, opts ...grpc.CallOption) (*ResBeat, error)
	AppsStatus(ctx context.Context, in *ReqAppStatus, opts ...grpc.CallOption) (*ResAppStatus, error)
	AppAction(ctx context.Context, in *ReqAppService, opts ...grpc.CallOption) (*ResAppService, error)
}

type promoteClient struct {
	cc grpc.ClientConnInterface
}

func NewPromoteClient(cc grpc.ClientConnInterface) PromoteClient {
	return &promoteClient{cc}
}

func (c *promoteClient) Ping(ctx context.Context, in *ReqPing, opts ...grpc.CallOption) (*ResPing, error) {
	out := new(ResPing)
	err := c.cc.Invoke(ctx, "/Promote/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promoteClient) AreYouLeader(ctx context.Context, in *ReqLead, opts ...grpc.CallOption) (*ResLead, error) {
	out := new(ResLead)
	err := c.cc.Invoke(ctx, "/Promote/AreYouLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promoteClient) Heartbeat(ctx context.Context, in *ReqBeat, opts ...grpc.CallOption) (*ResBeat, error) {
	out := new(ResBeat)
	err := c.cc.Invoke(ctx, "/Promote/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promoteClient) AppsStatus(ctx context.Context, in *ReqAppStatus, opts ...grpc.CallOption) (*ResAppStatus, error) {
	out := new(ResAppStatus)
	err := c.cc.Invoke(ctx, "/Promote/AppsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promoteClient) AppAction(ctx context.Context, in *ReqAppService, opts ...grpc.CallOption) (*ResAppService, error) {
	out := new(ResAppService)
	err := c.cc.Invoke(ctx, "/Promote/AppAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromoteServer is the server API for Promote service.
// All implementations must embed UnimplementedPromoteServer
// for forward compatibility
type PromoteServer interface {
	Ping(context.Context, *ReqPing) (*ResPing, error)
	AreYouLeader(context.Context, *ReqLead) (*ResLead, error)
	Heartbeat(context.Context, *ReqBeat) (*ResBeat, error)
	AppsStatus(context.Context, *ReqAppStatus) (*ResAppStatus, error)
	AppAction(context.Context, *ReqAppService) (*ResAppService, error)
	mustEmbedUnimplementedPromoteServer()
}

// UnimplementedPromoteServer must be embedded to have forward compatible implementations.
type UnimplementedPromoteServer struct {
}

func (UnimplementedPromoteServer) Ping(context.Context, *ReqPing) (*ResPing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPromoteServer) AreYouLeader(context.Context, *ReqLead) (*ResLead, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouLeader not implemented")
}
func (UnimplementedPromoteServer) Heartbeat(context.Context, *ReqBeat) (*ResBeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedPromoteServer) AppsStatus(context.Context, *ReqAppStatus) (*ResAppStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppsStatus not implemented")
}
func (UnimplementedPromoteServer) AppAction(context.Context, *ReqAppService) (*ResAppService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppAction not implemented")
}
func (UnimplementedPromoteServer) mustEmbedUnimplementedPromoteServer() {}

// UnsafePromoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromoteServer will
// result in compilation errors.
type UnsafePromoteServer interface {
	mustEmbedUnimplementedPromoteServer()
}

func RegisterPromoteServer(s grpc.ServiceRegistrar, srv PromoteServer) {
	s.RegisterService(&Promote_ServiceDesc, srv)
}

func _Promote_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromoteServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Promote/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromoteServer).Ping(ctx, req.(*ReqPing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promote_AreYouLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLead)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromoteServer).AreYouLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Promote/AreYouLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromoteServer).AreYouLeader(ctx, req.(*ReqLead))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promote_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromoteServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Promote/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromoteServer).Heartbeat(ctx, req.(*ReqBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promote_AppsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAppStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromoteServer).AppsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Promote/AppsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromoteServer).AppsStatus(ctx, req.(*ReqAppStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promote_AppAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAppService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromoteServer).AppAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Promote/AppAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromoteServer).AppAction(ctx, req.(*ReqAppService))
	}
	return interceptor(ctx, in, info, handler)
}

// Promote_ServiceDesc is the grpc.ServiceDesc for Promote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Promote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Promote",
	HandlerType: (*PromoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Promote_Ping_Handler,
		},
		{
			MethodName: "AreYouLeader",
			Handler:    _Promote_AreYouLeader_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Promote_Heartbeat_Handler,
		},
		{
			MethodName: "AppsStatus",
			Handler:    _Promote_AppsStatus_Handler,
		},
		{
			MethodName: "AppAction",
			Handler:    _Promote_AppAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
